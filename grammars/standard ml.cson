######
# Section 2.4 of SML'97 definition:
#
# An identifier is either alphanumeric: any sequence of letters, digits, primes
# (') and underbars (_) starting with a letter or prime, or symbolic: any non-
# empty sequence of the following symbols
# ! % & $ # + - / : < = > ? @ \ ~ ' ^ | *
#
# In either case, however, reserved words are excluded. This means that for
# example # and | are not identifiers, but ## and |=| are identifiers.
# The only exception to this rule is that the symbol = , which is a reserved
# word, is also allowed as an identifier to stand for the equality predicate. The
# identifier = may not be re-bound; this precludes any syntactic ambiguity.
#
########
#
# Since this is a rather complex definition, we're ignoring symbolic identifers
# for now. You shuld use the following regex to cover most common identifers:
#
#     [a-zA-Z\'][a-zA-Z0-9\'_]*
#

'fileTypes': [
  'sml'
  'sig'
  'fun'
]
'name': 'Standard ML'
'patterns': [
  {
    'include': '#comments'
  }
  # recognize: val rec x = ...
  {
    'match': '\\b(val)\\s+(rec)?\\b'
    'captures':
      '1':
        'name': 'keyword.other.ml'
      '2':
        'name': 'keyword.other.ml'
    'name': 'meta.exp.ml.val'
  }
  {
    'begin': '\\b(let)\\b'
    'captures':
      '1':
        'name': 'keyword.other.ml'
      '2':
        'name': 'keyword.other.ml'
    'end': '\\b(end)\\b'
    'name': 'meta.exp.let.ml'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
  {
    'begin': '\\b(sig)\\b'
    'captures':
      '1':
        'name': 'keyword.other.delimiter.ml'
      '2':
        'name': 'keyword.other.delimiter.ml'
    'end': '\\b(end)\\b'
    'name': 'meta.module.sigdec.ml'
    'patterns': [
      {
        'include': '#spec'
      }
    ]
  }
  {
    'match': '\\b(if|then|else|orelse|andalso|before)\\b'
    'name': 'keyword.control.ml'
  }
  # repurpose the 'class' term for structure accesses
  # NOTE: we expect first letter here to be capital purely from
  # common naming conventions.
  {
    'match': '([A-Z][a-zA-Z0-9\'_]*)\\s*\\.'
    'captures':
      '1':
        'name': 'entity.name.class.markup.italic.ml'
  }
  {
    'begin': '\\b(fun|and)\\s+([a-zA-Z\'][a-zA-Z0-9\'_]*)\\b'
    'captures':
      '1':
        'name': 'keyword.control.fun.ml'
      '2':
        'name': 'entity.name.function.ml'
    'end': '(?=val|type|eqtype|datatype|structure|local)'
    'name': 'meta.definition.fun.ml'
    'patterns': [
      {
        'include': 'source.sml'
      }
    ]
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.ml'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.ml'
    'name': 'string.quoted.double.ml'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.ml'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.constant.ml'
      '3':
        'name': 'punctuation.definition.constant.ml'
    'match': '(#")(\\\\)?.(")'
    'name': 'constant.character.ml'
  }
  {
    'match': '\\b\\d*\\.?\\d+\\b'
    'name': 'constant.numeric.ml'
  }
  #
  # http://sml-family.org/Basis/top-level-chapter.html
  # some of these idents overlap with type names, so
  # i've hand-selected only the most "useful" ones
  {
    'match': '\\b(abs|app|ceil|chr|concat|exnMessage|exnName|explode|floor|foldl|foldr|getOpt|hd|ignore|implode|isSome|length|map|not|null|o|ord|print|rev|tl|trunc|valOf)\\b'
    'name': 'support.function.ml'
  }
  {
    'match': '\\b(false|true|NONE|SOME|LESS|EQUAL|GREATER|nil)\\b'
    'name': 'support.constant.ml'
  }
  {
    'match': '\\b(unit|int|word|real|char|string|substring|exn|array|vector|ref|bool|option|order|list)\\b'
    'name': 'support.type.ml'
  }
  # only a selection of "important" ones to distinguish
  {
    'match': '(div|mod|::|@|;)'
    'name': 'keyword.operator.ml'
  }
  # couldn't find a better class name for this,
  # but I did want it to be different from the keyword
  # color.
  #
  # names I'm aware of are from here:
  # https://macromates.com/manual/en/language_grammars.html
  {
    'match': '(\\||=>)'
    'name': 'entity.name.tag.ml'
  }
  #
  {
    'begin': '(?x)\\b\n\t\t\t\t\t(functor|structure|signature|funsig)\\s+\n\t\t\t\t\t([a-zA-Z\'][a-zA-Z0-9\'_]*)\\s* # identifier'
    'captures':
      '1':
        'name': 'storage.type.module.binder.ml'
      '2':
        'name': 'entity.name.type.module.ml'
    'end': '(?==|:|\\()'
    'name': 'meta.module.dec.ml'
  }
  {
    'match': '\\b(open)\\b'
    'name': 'keyword.other.module.ml'
  }
  {
    'begin': '\\b(type|eqtype) .* ='
    'captures':
      '1':
        'name': 'keyword.other.typeabbrev.ml'
      '2':
        'name': 'variable.other.typename.ml'
    'end': '$'
    'name': 'meta.typeabbrev.ml'
    'patterns': [
      {
        'match': '(([a-zA-Z0-9\\.\\* ]|(\\->))*)'
        'name': 'meta.typeexp.ml'
      }
    ]
  }
  # bunch of keywords otherwise not matched
  {
    'match': '\\b(val|datatype|signature|type|op|struct|as|let|in|abstype|local|case|of|fn|raise|exception|handle|infix|infixr|end|structure|withtype)\\b'
    'name': 'keyword.other.ml'
  }
]
'repository':
  'comments':
    'patterns': [
      {
        'begin': '\\(\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.ml'
        'end': '\\*\\)'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.ml'
        'name': 'comment.block.ml'
        'patterns': [
          {
            'include': '#comments'
          }
        ]
      }
    ]
  'spec':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'keyword.other.ml'
          '2':
            'name': 'entity.name.type.abbrev.ml'
        'match': '\\b(type|eqtype)\\s+((?:\'+[a-z]\\s+)?[a-zA-Z\'][a-zA-Z0-9\'_]*)'
        'name': 'meta.spec.ml.type'
      }
      {
        'captures':
          '1':
            'name': 'keyword.other.ml'
          '2':
            'name': 'entity.name.type.abbrev.ml'
          '3':
            'name': 'keyword.other.ml'
        'match': '\\b(exception)\\s+((?:\'+[a-z]\\s+)?[a-zA-Z\'][a-zA-Z0-9\'_]*)\\s+(of)?'
        'name': 'meta.spec.ml.type'
      }
      {
        'begin': '\\b(datatype)\\s+((?:\'+[a-z]\\s+)?[a-zA-Z\'][a-zA-Z0-9\'_]*)'
        'captures':
          '1':
            'name': 'keyword.other.ml'
          '2':
            'name': 'entity.name.type.datatype.ml'
        'end': '(?=val|type|eqtype|datatype|structure|include|exception|end)'
        'name': 'meta.spec.ml.datatype'
        'patterns': [
          {
            'captures':
              '1':
                'name': 'keyword.other.ml'
              '2':
                'name': 'entity.name.type.datatype.ml'
            'match': '\\b(and)\\s+((?:[a-z\']+\\s+)?[a-zA-Z\'][a-zA-Z0-9\'_]*)'
            'name': 'meta.spec.ml.datatype'
          }

          # NOTE: it's not feasible to fix issues with multi-line
          # patterns such as:
          #
          #     datatype color =
          #            Red
          #          | Blue
          #
          # where "Red" is not matched by the pattern correctly, since
          # TextMate patterns can't span multiple lines.
          # see some discussion here:
          # https://github.com/Microsoft/vscode-textmate/issues/41#issuecomment-344294298
          {
            'captures':
              '1':
                'name': 'variable.other.dcon.ml'
              '2':
                'name': 'keyword.other.ml'
            'match': '(?:=|\\|)\\s*([a-zA-Z][a-zA-Z0-9\'_]*)\\s+(of)?'
            'name': 'meta.datatype.rule.main.ml'
          }
          {
            'include': '#comments'
          }
        ]
      }
      {
        'match': '\\b((?:val)|(?:and))\\s*([^:]+)\\s*(:)'
        'captures':
          '1':
            'name': 'keyword.other.ml'
          '2':
            'name': 'entity.name.function.ml'
        'name': 'meta.spec.ml.val'
      }
      {
        'begin': '\\b(structure)\\s*([a-zA-Z\'][a-zA-Z0-9\'_]*)\\s*:'
        'captures':
          '1':
            'name': 'keyword.other.ml'
          '2':
            'name': 'entity.name.type.module.ml'
        'end': '(?=val|type|eqtype|datatype|structure|include|end)'
        'name': 'meta.spec.ml.structure'
        'patterns': [
          {
            'match': '\\b(sharing|where)\\b'
            'name': 'keyword.other.ml'
          }
          {
            'include': '#comments'
          }
        ]
      }
      {
        'captures':
          '1':
            'name': 'keyword.other.ml'
          '2':
            'name': 'entity.name.type.module.ml'
        'match': '\\b(include)\\s+([a-zA-Z\'][a-zA-Z0-9\'_]*)'
        'name': 'meta.spec.ml.include'
      }
      # make long type signatures easier to read in sigs
      # by highlighting -> and *
      #
      # NOTE: this is a quick and dirty solution. In reality
      # it would be nice to also highlight parens specially.
      # I believe we would just need to look for everything after : in
      #    val ident : < type sig highlighting pattern >
      # and the code for this can be integrated in the regular highlighting
      # above for type sigs.
      {
        'match': '->'
        'name': 'entity.name.tag.ml'
      }
      {
        'match': '\\*'
        'name': 'markup.bold'
      }

      {
        'include': '#comments'
      }
    ]
'scopeName': 'source.sml'
